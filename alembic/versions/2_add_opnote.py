"""add opnote

Revision ID: 2
Revises: 1
Create Date: 2025-07-17 20:14:47.615190

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "2"
down_revision: Union[str, None] = "1"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


OP_NOTE_STATUS = sa.Enum(
    "DRAFT",
    "SUBMITTED",
    name="opnotestatus",
)


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "op_notes",
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("status", OP_NOTE_STATUS, nullable=False),
        sa.Column("patient_id", sa.String(length=255), nullable=True),
        sa.Column("patient_first_name", sa.String(length=100), nullable=True),
        sa.Column("patient_last_name", sa.String(length=100), nullable=True),
        sa.Column("operation_datetime_start", sa.DateTime(), nullable=True),
        sa.Column("operation_datetime_end", sa.DateTime(), nullable=True),
        sa.Column("text", sa.Text(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_unique_constraint(None, "users", ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "users", type_="unique")
    op.drop_table("op_notes")
    try:
        OP_NOTE_STATUS.drop(op.get_bind(), checkfirst=True)
    except Exception:
        pass
    # ### end Alembic commands ###
